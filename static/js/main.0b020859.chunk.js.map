{"version":3,"sources":["components/FileUpload/FileUpload.tsx","components/FileViewer/FileViewer.tsx","hooks/debounce.ts","common/utils.ts","components/Marker/Marker.tsx","components/SearchBar/SearchBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Dragger","Upload","FileUpload","props","className","accept","showUploadList","InboxOutlined","defaultProps","multiple","FileViewer","useState","searchText","setSearchText","file","setFile","filterData","setFilterData","searchStrIndex","setSearchStrIndex","setIsSearching","debouncedSearchTerm","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","disableHeader","hasOwnProperty","searchStr","data","caseSensitive","searchStrLen","length","index","startIndex","indices","toLowerCase","indexOf","push","getSubStringIndex","filteredData","strArray","isSearchMatch","slice","i","forEach","j","k","splitTextByIndex","resetData","onFileUpload","info","status","onloadCb","onerrorCb","reader","FileReader","readAsText","originFileObj","onload","result","toString","onerror","console","log","error","DOMException","fileReader","searchIdCounter","flex","isDisable","onSearch","pageSize","disabled","simple","total","onChange","page","ele","document","getElementById","name","scrollDiv","scrollIntoView","behavior","block","UploadOutlined","orientation","id","map","obj","key","Marker","Search","Input","SearchBar","size","placeholder","e","currentTarget","enterButton","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0b020859.chunk.js","sourcesContent":["import './FileUpload.scss';\n\nimport { Upload } from 'antd';\nimport React from 'react';\nimport { InboxOutlined } from '@ant-design/icons';\n\nconst { Dragger } = Upload;\n\nexport interface FileUploadProps {\n  multiple?: boolean;\n  action?: (file: File) => Promise<any>;\n  onChange?: (info: any) => void;\n}\n\nexport const FileUpload = (props: FileUploadProps) => {\n  return (\n    <section className=\"upload-control\">\n      <Dragger accept=\"text/plain\" showUploadList={false} {...props}>\n        <p className=\"ant-upload-drag-icon\">\n          <InboxOutlined />\n        </p>\n        <p className=\"ant-upload-text\">\n          Click or drag file to this area to upload\n        </p>\n        <p className=\"ant-upload-hint\">\n          Support for a single or bulk upload. Strictly prohibit from uploading\n          company data or other band files\n        </p>\n      </Dragger>\n    </section>\n  );\n};\n\nFileUpload.defaultProps = {\n  multiple: false,\n};\n","import \"./FileViewer.scss\";\nimport { Button, Col, Divider, Pagination, Row, Upload } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { FileUpload, Marker, SearchBar } from \"../\";\nimport {\n  fileReader,\n  getSubStringIndex,\n  MatchDataMeta,\n  splitTextByIndex,\n} from \"../../common/utils\";\nimport { useDebounce } from \"../../hooks\";\n\nexport interface FileViewerProps {\n  file?: File;\n  name?: string;\n  size?: Number;\n  type?: string;\n  uid?: string;\n  data?: string;\n  searchText?: string;\n}\n\nexport const FileViewer = (props: FileViewerProps) => {\n  const [searchText, setSearchText] = useState<string>(\"\");\n  const [file, setFile] = useState<FileViewerProps>({});\n  const [filterData, setFilterData] = useState<Array<MatchDataMeta>>([]);\n  const [searchStrIndex, setSearchStrIndex] = useState<Array<number>>([]);\n  const [isSearching, setIsSearching] = useState<boolean>(false);\n  const debouncedSearchTerm = useDebounce(searchText, 300);\n  const disableHeader = !file.hasOwnProperty(\"data\");\n\n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      setIsSearching(true);\n      const searchStrIndex = getSubStringIndex(\n        searchText,\n        file.data || \"\",\n        false\n      );\n      const filteredData = splitTextByIndex(\n        searchStrIndex,\n        searchText.length,\n        file.data || \"\"\n      );\n      setSearchStrIndex(searchStrIndex);\n      setFilterData(filteredData);\n    } else {\n      resetData();\n    }\n  }, [debouncedSearchTerm]);\n\n  useEffect(() => {\n    setSearchText(\"\");\n    resetData();\n  }, [file]);\n\n  const onFileUpload = (info: any) => {\n    if (info.file.status !== \"uploading\") {\n      fileReader(info.file, (data) => {\n        setFile({\n          ...props,\n          ...info.file,\n          data,\n        });\n      });\n    }\n  };\n\n  const resetData = () => {\n    setFilterData([\n      {\n        data: file.data || \"\",\n        isSearchMatch: false,\n      },\n    ]);\n    setSearchStrIndex([]);\n  };\n\n  const onPageChange = (page: number) => {\n    const ele = document.getElementById(`${file.name}-${page}`);\n    const scrollDiv = document.getElementById(\"file-upload-wrapper\");\n    if (ele && scrollDiv) {\n      ele.scrollIntoView({ behavior: \"smooth\", block: \"nearest\" });\n      // scrollDiv.scrollTop = ele.offsetTop;\n    }\n  };\n  let searchIdCounter = 1;\n  return (\n    <div className=\"FileViewer\">\n      <Row className=\"file-search-controller\">\n        <Col flex={3}>\n          <SearchBar\n            isDisable={disableHeader}\n            onSearch={setSearchText}\n          ></SearchBar>\n        </Col>\n        <Col>\n          <Pagination\n            pageSize={1}\n            disabled={disableHeader}\n            simple\n            total={searchStrIndex.length}\n            onChange={onPageChange}\n          ></Pagination>\n        </Col>\n        <Col flex={1}>\n          <Upload\n            accept=\"text/plain\"\n            showUploadList={false}\n            onChange={onFileUpload}\n          >\n            <Button>\n              <UploadOutlined /> Click to Upload\n            </Button>\n          </Upload>\n        </Col>\n      </Row>\n\n      <Divider className=\"App-divider\" orientation=\"left\">\n        File Viewer\n      </Divider>\n      <section id=\"file-upload-wrapper\">\n        {file.data && (\n          <section className=\"file-content\">\n            {filterData.map((obj: MatchDataMeta, index: number) => (\n              // <pre className=\"search-text-match\">{obj.data}</pre>\n              <Marker\n                key={index}\n                {...(obj.isSearchMatch\n                  ? { id: `${file.name}-${searchIdCounter++}` }\n                  : {})}\n                {...obj}\n              ></Marker>\n            ))}\n          </section>\n        )}\n        {!file.data && <FileUpload onChange={onFileUpload}></FileUpload>}\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nexport  function useDebounce(value: any, delay: number) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Set debouncedValue to value (passed in) after the specified delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below). \n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically.\n    [value]\n  );\n\n  return debouncedValue;\n}\n","import { FileViewerProps } from \"../components\";\n\nexport const getSubStringIndex = (searchStr: string, data: string, caseSensitive: boolean): Array<number> => {\n    const searchStrLen: number = searchStr.length;\n\n    if (searchStrLen == 0) {\n        return [];\n    }\n\n    let startIndex = 0;\n    let index\n    let indices = [];\n\n    // convert to lowercase for case in-sensitive search \n    if (!caseSensitive) {\n        data = data.toLowerCase();\n        searchStr = searchStr.toLowerCase();\n    }\n\n    while ((index = data.indexOf(searchStr, startIndex)) > -1) {\n        indices.push(index);\n        startIndex = index + searchStrLen;\n    }\n\n    return indices;\n}\n\nexport interface MatchDataMeta {\n    data: string;\n    isSearchMatch: boolean;\n}\n\nexport const splitTextByIndex = (index: Array<number>, length: number, data: string): Array<MatchDataMeta> => {\n    let strArray: Array<MatchDataMeta> = [];\n\n    if (index.length <= 0 || length <= 0) {\n        return [{ data, isSearchMatch: false }];\n    }\n\n    if (index[0] >= 0) {\n        strArray.push({ data: data.slice(0, index[0]), isSearchMatch: false });\n        // data = data.slice(index[0] + length, data.length)\n    }\n\n    if (index.length === 1) {\n        const i = index[0];\n        strArray.push({ data: data.slice(i, i + length), isSearchMatch: true });\n        strArray.push({ data: data.slice(i + length, data.length), isSearchMatch: false })\n        return strArray;\n    }\n\n    index.forEach((j, k) => {\n        strArray.push({ data: data.slice(j, j + length), isSearchMatch: true });\n        if (k < index.length) {\n            strArray.push({ data: data.slice(j + length, index[k + 1]), isSearchMatch: false })\n        }\n        // data = data.slice(i + length + 1, data.length);\n    });\n\n    // strArray.push(data);\n\n    return strArray;\n}\n\n\nexport const fileReader = (file: any,\n    onloadCb: (data: string) => void,\n    onerrorCb?: (e: any) => {},): void => {\n    let reader = new FileReader();\n    reader.readAsText(file.originFileObj);\n    reader.onload = function () {\n        onloadCb(reader.result ? reader.result.toString() : \"\");\n    };\n\n    reader.onerror = function () {\n        console.log(reader.error);\n        console.error(new DOMException(\"Problem parsing input file.\"));\n        if (onerrorCb) {\n            onerrorCb(reader.error);\n        }\n    };\n}\n","import './Marker.scss';\nimport React, { FunctionComponent, Ref } from 'react';\n\nexport interface MarkerProps {\n  data: string;\n  isSearchMatch?: boolean;\n  ref?: React.RefObject<any>;\n  id?: string;\n}\n\nexport const Marker: FunctionComponent<MarkerProps> = (props) => {\n  return (\n    <pre\n      {...(props.id ? { id: props.id } : {})}\n      className={props.isSearchMatch ? \"highlight-text\" : \"\"}\n    >\n      {props.data}\n    </pre>\n  );\n};\n","import \"./SearchBar.scss\";\nimport { Col, Input, Row } from \"antd\";\nimport React from \"react\";\n\nconst { Search } = Input;\n\ninterface SearchBarProp {\n  onSearch: (searchTxt: string) => void;\n  isDisable?: boolean;\n}\n\nexport const SearchBar = ({ onSearch, isDisable = false }: SearchBarProp) => {\n  return (\n    <Search\n      disabled={isDisable}\n      size=\"large\"\n      className=\"search-input\"\n      placeholder=\"input search text\"\n      onChange={(e) => {\n        onSearch(e.currentTarget.value);\n      }}\n      onSearch={onSearch}\n      enterButton\n    />\n  );\n};\n","import './App.scss';\nimport 'antd/dist/antd.css';\nimport { Col, Row } from 'antd';\nimport React, { useState } from 'react';\n\nimport { FileViewer } from './components';\n\nfunction App() {\n  return (\n    <Row className=\"App-body\">\n      <Col className=\"display-flex\" flex=\"auto\">\n        <FileViewer></FileViewer>\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}